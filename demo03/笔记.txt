索引基础
索引是对数据库表中一列或多列的值进行排序的一种结构，可以让我们查询数据库变得更快。
MongoDB 的索引几乎与传统的关系型数据库一模一样，这其中也包括一些基本的查询优化技巧。

复合索引（当需要关联查询的时候，就应该使用复合索引。）

例如：db.user.ensureIndex({"username": 1, "age": -1})

该索引被创建后，基于 username 和 age 的查询将会用到该索引，或者是基于 username 的查询
也会用到该索引，（但是只是基于 age 的查询将不会用到该复合索引。因此可以说，如果想用到复合索引，
必须在查询条件中包含复合索引中的前 N 个索引列）。然而如果查询条件中的键值顺序和复合索引中的创建
顺序不一致的话，MongoDB 可以智能的帮助我们调整该顺序，以便使复合索引可以为查询所用

注意：随着集合的增长，需要针对查询中大量的排序做索引。如果没有对索引的键调用 sort，
MongoDB 需要将所有数据提取到内存并排序。因此在做无索引排序时，如果数据量过大以致无法在内存中进行排序，
次数 MongoDB 将会报错


唯一索引
在缺省情况下创建的索引均不是唯一索引。
例如：db.user.ensureIndex({"userid": 1}, {"unique": true})




创建索引的命令
例如：db.user.ensureIndex({"username": 1})

获取当前集合的索引
例如：db.user.getIndexes()

删除索引的命令
例如：db.user.dropIndex({"username": 1})

查询具体的执行时间
例如：db.user.find("加查询条件").explain("executionStats")
"executionTimeMillis" : 0;     //执行时间

