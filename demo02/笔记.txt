mongoDB 使用：
打开cmd 输入 mongo 即刻 建立数据库连接

指令
show dbs：查看当前电脑上拥有的mongoDB数据库
use 库名称：使用数据库，创建数据库
db.集合名称（表）.insert( { '键' ; ' 值 '} )：向当前数据库插入集合（表）数据。
show collections：查看当前库中的集合（表）
db.集合名称.drop()：删除集合（表）
db.dropDatabase()：删除数据库

一次性插入多条数据
for (var i = 1; i < 100; i++) {
  db.admin.insert({"username": "xiaoming" + i, "age": i})
};

创建数据库
如果真的想把这个数据库创建成功，那么必须插入一个数据。

删除集合，删除指定的集合，删除表


查询语句

db.集合名称（表）.find()：查询集合（表）中的数据
例如：db.user.find()
db.集合名称（表）.find({字段名:值})：查询指定值的数据
例如：db.user.find({age: 20})
db.集合名称（表）.find({字段名:{$lt: 值}})：查询小于多少的数据
例如：db.user.find(age: {$lt: 20})
db.集合名称（表）.find({字段名:{$gt: 值}})：查询大于多少的数据
例如：db.user.find({age: {$gt: 20}})
db.集合名称（表）.find({字段名:{$lte: 值}})：查询小于等于多少的数据
例如：db.user.find({age: {$lte: 20}})
db.集合名称（表）.find({字段名:{$gte: 值}})：查询大于等于多少的数据
例如：db.user.find({age: {$gte: 20}})
db.集合名称（表）.find({字段名:{$gte: 值, $lte: 值}})：查询大于等于多少 并且 少于等于多少的数据
例如：db.user.find({age: {$gte: 20, $lte: 30}})

db.集合名称（表）.find({字段名: /xx/})：查询指定字段名中 含 "xx" 的数据 （模糊查找）
例如：db.user.find({name: /i/})
db.集合名称（表）.find({字段名: /^xxx/})：查询指定字段名中 以 "xx" 开头的数据 （模糊查找）
例如：db.user.find({name: /^x/});
db.集合名称（表）.find({字段名: /xxx$/})：查询指定字段名中 以 "xx" 结尾的数据 （模糊查找）
例如：db.user.find({name: /x$/});

db.集合名称（表）.find({}, {字段名: 1})：查询指定列的数据
注意：第一个{} 放where条件 第二个{} 指定那些列显示和不显示 （0表示不显示 1表示显示)
例如：db.user.find({}, {age: 1});
db.集合名称（表）.find({}, {字段名: 1})：查询指定列 带有条件判断的 数据
例如：db.user.find({age: {$lt: 20}}, {name: 0});

db.集合名称（表）.find.sort({字段名: 1}); 查询指定数据排序 （1 升序   -1  降序）
例如：db.user.find().sort({age: 1})

db.集合名称（表）.find.limit(值)：查询前 x 条数据
例如：db.user.find().limit(5)

db.集合名称（表）.find.skip(值)：查询 x 条以后的数据
例如：db.user.find().skip(10) 

db.集合名称（表）.find.skip(值)：查询 x 条开始 至 x 条结束的数据
例如：db.user.find().skip(2).limit(4)

db.集合名称（表）.find().count()：查询集合（表）里总共有多少条数据
例如：db.admin.find().count()

分页算法 limit 是 pageSize，skip 是 第几页 - 1 * pageSize
例如：db.admin.find().skip((3-1) * pageSize).limit(pageSize)

db.集合名称（表）.find({$or: ["字段名": 值, "字段名": 值]})：查询包含跟字段名相关的数据
例如：db.admin.find({$or: [{age: 22}, {name: 'xiaoming'}]})

db.集合名称（表）.findOne()：查询第一条数据
例如：db.admin.findOne()

修改数据（要修改数据，就要先查询，后修改）

db.集合名称（表）.update({"要修改的字段名": 值}, {$set: {"修改的字段名 或 新增字段名": 值}})：修改更新当前数据
例如：db.user.update({"name": "xiaoming"}, {$set: {"age": 30}})

如果在修改数据的时候，不使用 $set ，就会把当前数据替换掉：完全替换当前数据
例如：db.user.update({"name": "xiaoming"}, {"name": "大明", "age": 16})

db.集合名称（表）.update({"要修改的字段名": 值}, {$set: {修改的字段名 或 新增字段名: 值}}, {multi: true})：批量更新匹配到的数据
例如：db.user.update({"name": "zhangsan"}, {$set: {age: "20"}}, {multi: true})


删除数据

db.集合名称（表）.remove({"要删除的字段名": 值})：批量删除匹配到的数据
例如：db.user.remove({"name": "xiaofen"})

db.集合名称（表）.remove({"要删除的字段名": 值}, {justOne: true})：只删除第一条匹配到的数据
例如：db.user.remove({"name": "xiaofen"}, {justOne: ture})











